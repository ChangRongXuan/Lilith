# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Banner {
  id: ID!
  name: String
  order: Int
  mobileImage: Photo
  desktopImage: Photo
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input BannerWhereUniqueInput {
  id: ID
  order: Int
}

input BannerWhereInput {
  AND: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  mobileImage: PhotoWhereInput
  desktopImage: PhotoWhereInput
  isActive: BooleanFilter
  publishDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  isActive: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input BannerUpdateInput {
  name: String
  order: Int
  mobileImage: PhotoRelateToOneForUpdateInput
  desktopImage: PhotoRelateToOneForUpdateInput
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BannerUpdateArgs {
  where: BannerWhereUniqueInput!
  data: BannerUpdateInput!
}

input BannerCreateInput {
  name: String
  order: Int
  mobileImage: PhotoRelateToOneForCreateInput
  desktopImage: PhotoRelateToOneForCreateInput
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  order: Int
  status: CategoryStatusType
  heroImage: Photo
  section: Section
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum CategoryStatusType {
  active
  inactive
}

input CategoryWhereUniqueInput {
  id: ID
  order: Int
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  status: CategoryStatusTypeNullableFilter
  heroImage: PhotoWhereInput
  section: SectionWhereInput
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CategoryStatusTypeNullableFilter {
  equals: CategoryStatusType
  in: [CategoryStatusType!]
  notIn: [CategoryStatusType!]
  not: CategoryStatusTypeNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  order: Int
  status: CategoryStatusType
  heroImage: PhotoRelateToOneForUpdateInput
  section: SectionRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SectionRelateToOneForUpdateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  order: Int
  status: CategoryStatusType
  heroImage: PhotoRelateToOneForCreateInput
  section: SectionRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SectionRelateToOneForCreateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Column {
  id: ID!
  name: String
  type: ColumnTypeType
  profile_photo: Photo
  intro: JSON
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  apiData: JSON
}

enum ColumnTypeType {
  trend
  entrepreneur
  publication
}

input ColumnWhereUniqueInput {
  id: ID
}

input ColumnWhereInput {
  AND: [ColumnWhereInput!]
  OR: [ColumnWhereInput!]
  NOT: [ColumnWhereInput!]
  id: IDFilter
  name: StringFilter
  type: ColumnTypeTypeNullableFilter
  profile_photo: PhotoWhereInput
  posts: PostManyRelationFilter
  specialfeatures: SpecialfeatureManyRelationFilter
}

input ColumnTypeTypeNullableFilter {
  equals: ColumnTypeType
  in: [ColumnTypeType!]
  notIn: [ColumnTypeType!]
  not: ColumnTypeTypeNullableFilter
}

input SpecialfeatureManyRelationFilter {
  every: SpecialfeatureWhereInput
  some: SpecialfeatureWhereInput
  none: SpecialfeatureWhereInput
}

input ColumnOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
}

input ColumnUpdateInput {
  name: String
  type: ColumnTypeType
  profile_photo: PhotoRelateToOneForUpdateInput
  intro: JSON
  posts: PostRelateToManyForUpdateInput
  specialfeatures: SpecialfeatureRelateToManyForUpdateInput
  apiData: JSON
}

input SpecialfeatureRelateToManyForUpdateInput {
  disconnect: [SpecialfeatureWhereUniqueInput!]
  set: [SpecialfeatureWhereUniqueInput!]
  create: [SpecialfeatureCreateInput!]
  connect: [SpecialfeatureWhereUniqueInput!]
}

input ColumnUpdateArgs {
  where: ColumnWhereUniqueInput!
  data: ColumnUpdateInput!
}

input ColumnCreateInput {
  name: String
  type: ColumnTypeType
  profile_photo: PhotoRelateToOneForCreateInput
  intro: JSON
  posts: PostRelateToManyForCreateInput
  specialfeatures: SpecialfeatureRelateToManyForCreateInput
  apiData: JSON
}

input SpecialfeatureRelateToManyForCreateInput {
  create: [SpecialfeatureCreateInput!]
  connect: [SpecialfeatureWhereUniqueInput!]
}

type EditorChoice {
  id: ID!
  order: Int
  post: Post
  specialfeature: Specialfeature
  status: EditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum EditorChoiceStatusType {
  published
  draft
  scheduled
  archived
}

input EditorChoiceWhereUniqueInput {
  id: ID
  order: Int
}

input EditorChoiceWhereInput {
  AND: [EditorChoiceWhereInput!]
  OR: [EditorChoiceWhereInput!]
  NOT: [EditorChoiceWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  post: PostWhereInput
  specialfeature: SpecialfeatureWhereInput
  status: EditorChoiceStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EditorChoiceStatusTypeNullableFilter {
  equals: EditorChoiceStatusType
  in: [EditorChoiceStatusType!]
  notIn: [EditorChoiceStatusType!]
  not: EditorChoiceStatusTypeNullableFilter
}

input EditorChoiceOrderByInput {
  id: OrderDirection
  order: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EditorChoiceUpdateInput {
  order: Int
  post: PostRelateToOneForUpdateInput
  specialfeature: SpecialfeatureRelateToOneForUpdateInput
  status: EditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input SpecialfeatureRelateToOneForUpdateInput {
  create: SpecialfeatureCreateInput
  connect: SpecialfeatureWhereUniqueInput
  disconnect: Boolean
}

input EditorChoiceUpdateArgs {
  where: EditorChoiceWhereUniqueInput!
  data: EditorChoiceUpdateInput!
}

input EditorChoiceCreateInput {
  order: Int
  post: PostRelateToOneForCreateInput
  specialfeature: SpecialfeatureRelateToOneForCreateInput
  status: EditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

input SpecialfeatureRelateToOneForCreateInput {
  create: SpecialfeatureCreateInput
  connect: SpecialfeatureWhereUniqueInput
}

type Event {
  id: ID!
  name: String
  eventStatus: EventEventStatusType
  status: EventStatusType
  type: EventTypeType
  region: EventRegionType
  section: Section
  heroImage: Photo
  content: JSON
  location: String
  organization: String
  event_start: DateTime
  event_end: DateTime
  isTop: Boolean
  bannaerImage: Photo
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  relatedEvents(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  relatedEventsCount(where: EventWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum EventEventStatusType {
  opening
  closed
}

enum EventStatusType {
  published
  draft
  scheduled
  archived
}

enum EventTypeType {
  seinsight
  external
}

enum EventRegionType {
  global
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  eventStatus: EventEventStatusTypeNullableFilter
  status: EventStatusTypeNullableFilter
  type: EventTypeTypeNullableFilter
  region: EventRegionTypeNullableFilter
  section: SectionWhereInput
  heroImage: PhotoWhereInput
  location: StringFilter
  organization: StringFilter
  event_start: DateTimeNullableFilter
  event_end: DateTimeNullableFilter
  isTop: BooleanFilter
  bannaerImage: PhotoWhereInput
  tags: TagManyRelationFilter
  relatedEvents: EventManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EventEventStatusTypeNullableFilter {
  equals: EventEventStatusType
  in: [EventEventStatusType!]
  notIn: [EventEventStatusType!]
  not: EventEventStatusTypeNullableFilter
}

input EventStatusTypeNullableFilter {
  equals: EventStatusType
  in: [EventStatusType!]
  notIn: [EventStatusType!]
  not: EventStatusTypeNullableFilter
}

input EventTypeTypeNullableFilter {
  equals: EventTypeType
  in: [EventTypeType!]
  notIn: [EventTypeType!]
  not: EventTypeTypeNullableFilter
}

input EventRegionTypeNullableFilter {
  equals: EventRegionType
  in: [EventRegionType!]
  notIn: [EventRegionType!]
  not: EventRegionTypeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  eventStatus: OrderDirection
  status: OrderDirection
  type: OrderDirection
  region: OrderDirection
  location: OrderDirection
  organization: OrderDirection
  event_start: OrderDirection
  event_end: OrderDirection
  isTop: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  name: String
  eventStatus: EventEventStatusType
  status: EventStatusType
  type: EventTypeType
  region: EventRegionType
  section: SectionRelateToOneForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  content: JSON
  location: String
  organization: String
  event_start: DateTime
  event_end: DateTime
  isTop: Boolean
  bannaerImage: PhotoRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  relatedEvents: EventRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  eventStatus: EventEventStatusType
  status: EventStatusType
  type: EventTypeType
  region: EventRegionType
  section: SectionRelateToOneForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  content: JSON
  location: String
  organization: String
  event_start: DateTime
  event_end: DateTime
  isTop: Boolean
  bannaerImage: PhotoRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  relatedEvents: EventRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

type Job {
  id: ID!
  name: String
  jobStatus: JobJobStatusType
  status: JobStatusType
  type: JobTypeType
  region: JobRegionType
  section: Section
  company: String
  loaction: String
  official_website: String
  official_website_titile: String
  profile_photo: Photo
  content: JSON
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  relatedJobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  relatedJobsCount(where: JobWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum JobJobStatusType {
  opening
  closed
}

enum JobStatusType {
  published
  draft
  scheduled
  archived
}

enum JobTypeType {
  fulltime
  parttime
  intern
  volunteer
}

enum JobRegionType {
  global
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
}

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  name: StringFilter
  jobStatus: JobJobStatusTypeNullableFilter
  status: JobStatusTypeNullableFilter
  type: JobTypeTypeNullableFilter
  region: JobRegionTypeNullableFilter
  section: SectionWhereInput
  company: StringFilter
  loaction: StringFilter
  official_website: StringFilter
  official_website_titile: StringFilter
  profile_photo: PhotoWhereInput
  tags: TagManyRelationFilter
  relatedJobs: JobManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input JobJobStatusTypeNullableFilter {
  equals: JobJobStatusType
  in: [JobJobStatusType!]
  notIn: [JobJobStatusType!]
  not: JobJobStatusTypeNullableFilter
}

input JobStatusTypeNullableFilter {
  equals: JobStatusType
  in: [JobStatusType!]
  notIn: [JobStatusType!]
  not: JobStatusTypeNullableFilter
}

input JobTypeTypeNullableFilter {
  equals: JobTypeType
  in: [JobTypeType!]
  notIn: [JobTypeType!]
  not: JobTypeTypeNullableFilter
}

input JobRegionTypeNullableFilter {
  equals: JobRegionType
  in: [JobRegionType!]
  notIn: [JobRegionType!]
  not: JobRegionTypeNullableFilter
}

input JobManyRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input JobOrderByInput {
  id: OrderDirection
  name: OrderDirection
  jobStatus: OrderDirection
  status: OrderDirection
  type: OrderDirection
  region: OrderDirection
  company: OrderDirection
  loaction: OrderDirection
  official_website: OrderDirection
  official_website_titile: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input JobUpdateInput {
  name: String
  jobStatus: JobJobStatusType
  status: JobStatusType
  type: JobTypeType
  region: JobRegionType
  section: SectionRelateToOneForUpdateInput
  company: String
  loaction: String
  official_website: String
  official_website_titile: String
  profile_photo: PhotoRelateToOneForUpdateInput
  content: JSON
  tags: TagRelateToManyForUpdateInput
  relatedJobs: JobRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input JobRelateToManyForUpdateInput {
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  name: String
  jobStatus: JobJobStatusType
  status: JobStatusType
  type: JobTypeType
  region: JobRegionType
  section: SectionRelateToOneForCreateInput
  company: String
  loaction: String
  official_website: String
  official_website_titile: String
  profile_photo: PhotoRelateToOneForCreateInput
  content: JSON
  tags: TagRelateToManyForCreateInput
  relatedJobs: JobRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input JobRelateToManyForCreateInput {
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

type Photo {
  id: ID!
  name: String
  copyright: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  file: CustomFileFieldOutput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

interface CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input PhotoWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type LocalCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  copyright: StringNullableFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  copyright: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  copyright: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CustomFileFieldInput {
  upload: Upload
  ref: String
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  copyright: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Post {
  id: ID!
  title: String
  subtitle: String
  weight: Int
  status: PostStatusType
  publishDate: DateTime
  section: Section
  category: Category
  columns(
    where: ColumnWhereInput! = {}
    orderBy: [ColumnOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Column!]
  columnsCount(where: ColumnWhereInput! = {}): Int
  region: String
  heroImage: Photo
  heroCaption: String
  brief: JSON
  content: JSON
  relatedPosts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  oldCategory: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum PostStatusType {
  published
  draft
  scheduled
  archived
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  subtitle: StringFilter
  weight: IntNullableFilter
  status: PostStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  section: SectionWhereInput
  category: CategoryWhereInput
  columns: ColumnManyRelationFilter
  region: StringNullableFilter
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  relatedPosts: PostManyRelationFilter
  tags: TagManyRelationFilter
  oldCategory: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input ColumnManyRelationFilter {
  every: ColumnWhereInput
  some: ColumnWhereInput
  none: ColumnWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  weight: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  region: OrderDirection
  heroCaption: OrderDirection
  oldCategory: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  subtitle: String
  weight: Int
  status: PostStatusType
  publishDate: DateTime
  section: SectionRelateToOneForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  columns: ColumnRelateToManyForUpdateInput
  region: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  brief: JSON
  content: JSON
  relatedPosts: PostRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  oldCategory: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ColumnRelateToManyForUpdateInput {
  disconnect: [ColumnWhereUniqueInput!]
  set: [ColumnWhereUniqueInput!]
  create: [ColumnCreateInput!]
  connect: [ColumnWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  subtitle: String
  weight: Int
  status: PostStatusType
  publishDate: DateTime
  section: SectionRelateToOneForCreateInput
  category: CategoryRelateToOneForCreateInput
  columns: ColumnRelateToManyForCreateInput
  region: String
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  brief: JSON
  content: JSON
  relatedPosts: PostRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  oldCategory: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input ColumnRelateToManyForCreateInput {
  create: [ColumnCreateInput!]
  connect: [ColumnWhereUniqueInput!]
}

type Resource {
  id: ID!
  name: String
  region: ResourceRegionType
  section: Section
  profile_photo: Photo
  content: JSON
  relatedResources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  relatedResourcesCount(where: ResourceWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum ResourceRegionType {
  global
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
}

input ResourceWhereUniqueInput {
  id: ID
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  id: IDFilter
  name: StringFilter
  region: ResourceRegionTypeNullableFilter
  section: SectionWhereInput
  profile_photo: PhotoWhereInput
  relatedResources: ResourceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ResourceRegionTypeNullableFilter {
  equals: ResourceRegionType
  in: [ResourceRegionType!]
  notIn: [ResourceRegionType!]
  not: ResourceRegionTypeNullableFilter
}

input ResourceManyRelationFilter {
  every: ResourceWhereInput
  some: ResourceWhereInput
  none: ResourceWhereInput
}

input ResourceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  region: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ResourceUpdateInput {
  name: String
  region: ResourceRegionType
  section: SectionRelateToOneForUpdateInput
  profile_photo: PhotoRelateToOneForUpdateInput
  content: JSON
  relatedResources: ResourceRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ResourceRelateToManyForUpdateInput {
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceUpdateArgs {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateInput!
}

input ResourceCreateInput {
  name: String
  region: ResourceRegionType
  section: SectionRelateToOneForCreateInput
  profile_photo: PhotoRelateToOneForCreateInput
  content: JSON
  relatedResources: ResourceRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input ResourceRelateToManyForCreateInput {
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

type Section {
  id: ID!
  name: String
  order: Int
  status: SectionStatusType
  isPresent: Boolean
  heroImage: Photo
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  resources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum SectionStatusType {
  active
  inactive
}

input SectionWhereUniqueInput {
  id: ID
  order: Int
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  status: SectionStatusTypeNullableFilter
  isPresent: BooleanFilter
  heroImage: PhotoWhereInput
  category: CategoryManyRelationFilter
  posts: PostManyRelationFilter
  jobs: JobManyRelationFilter
  events: EventManyRelationFilter
  resources: ResourceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input SectionStatusTypeNullableFilter {
  equals: SectionStatusType
  in: [SectionStatusType!]
  notIn: [SectionStatusType!]
  not: SectionStatusTypeNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input SectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  status: OrderDirection
  isPresent: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SectionUpdateInput {
  name: String
  order: Int
  status: SectionStatusType
  isPresent: Boolean
  heroImage: PhotoRelateToOneForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  jobs: JobRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  resources: ResourceRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  name: String
  order: Int
  status: SectionStatusType
  isPresent: Boolean
  heroImage: PhotoRelateToOneForCreateInput
  category: CategoryRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  jobs: JobRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  resources: ResourceRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type Specialfeature {
  id: ID!
  title: String
  subtitle: String
  weight: Int
  status: SpecialfeatureStatusType
  publishDate: DateTime
  content: JSON
  columns(
    where: ColumnWhereInput! = {}
    orderBy: [ColumnOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Column!]
  columnsCount(where: ColumnWhereInput! = {}): Int
  heroImage: Photo
  heroCaption: String
  relatedPosts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  specialfeatureLists(
    where: SpecialfeatureListWhereInput! = {}
    orderBy: [SpecialfeatureListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SpecialfeatureList!]
  specialfeatureListsCount(where: SpecialfeatureListWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum SpecialfeatureStatusType {
  published
  draft
  scheduled
  archived
}

input SpecialfeatureWhereUniqueInput {
  id: ID
}

input SpecialfeatureWhereInput {
  AND: [SpecialfeatureWhereInput!]
  OR: [SpecialfeatureWhereInput!]
  NOT: [SpecialfeatureWhereInput!]
  id: IDFilter
  title: StringFilter
  subtitle: StringFilter
  weight: IntNullableFilter
  status: SpecialfeatureStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  columns: ColumnManyRelationFilter
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  relatedPosts: PostManyRelationFilter
  specialfeatureLists: SpecialfeatureListManyRelationFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input SpecialfeatureStatusTypeNullableFilter {
  equals: SpecialfeatureStatusType
  in: [SpecialfeatureStatusType!]
  notIn: [SpecialfeatureStatusType!]
  not: SpecialfeatureStatusTypeNullableFilter
}

input SpecialfeatureListManyRelationFilter {
  every: SpecialfeatureListWhereInput
  some: SpecialfeatureListWhereInput
  none: SpecialfeatureListWhereInput
}

input SpecialfeatureOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  weight: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  heroCaption: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SpecialfeatureUpdateInput {
  title: String
  subtitle: String
  weight: Int
  status: SpecialfeatureStatusType
  publishDate: DateTime
  content: JSON
  columns: ColumnRelateToManyForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  relatedPosts: PostRelateToManyForUpdateInput
  specialfeatureLists: SpecialfeatureListRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SpecialfeatureListRelateToManyForUpdateInput {
  disconnect: [SpecialfeatureListWhereUniqueInput!]
  set: [SpecialfeatureListWhereUniqueInput!]
  create: [SpecialfeatureListCreateInput!]
  connect: [SpecialfeatureListWhereUniqueInput!]
}

input SpecialfeatureUpdateArgs {
  where: SpecialfeatureWhereUniqueInput!
  data: SpecialfeatureUpdateInput!
}

input SpecialfeatureCreateInput {
  title: String
  subtitle: String
  weight: Int
  status: SpecialfeatureStatusType
  publishDate: DateTime
  content: JSON
  columns: ColumnRelateToManyForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  relatedPosts: PostRelateToManyForCreateInput
  specialfeatureLists: SpecialfeatureListRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SpecialfeatureListRelateToManyForCreateInput {
  create: [SpecialfeatureListCreateInput!]
  connect: [SpecialfeatureListWhereUniqueInput!]
}

type SpecialfeatureList {
  id: ID!
  title: String
  weight: Int
  status: SpecialfeatureListStatusType
  publishDate: DateTime
  heroImage: Photo
  content: JSON
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  url: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum SpecialfeatureListStatusType {
  published
  draft
  scheduled
  archived
}

input SpecialfeatureListWhereUniqueInput {
  id: ID
}

input SpecialfeatureListWhereInput {
  AND: [SpecialfeatureListWhereInput!]
  OR: [SpecialfeatureListWhereInput!]
  NOT: [SpecialfeatureListWhereInput!]
  id: IDFilter
  title: StringFilter
  weight: IntNullableFilter
  status: SpecialfeatureListStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  specialfeatures: SpecialfeatureManyRelationFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input SpecialfeatureListStatusTypeNullableFilter {
  equals: SpecialfeatureListStatusType
  in: [SpecialfeatureListStatusType!]
  notIn: [SpecialfeatureListStatusType!]
  not: SpecialfeatureListStatusTypeNullableFilter
}

input SpecialfeatureListOrderByInput {
  id: OrderDirection
  title: OrderDirection
  weight: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SpecialfeatureListUpdateInput {
  title: String
  weight: Int
  status: SpecialfeatureListStatusType
  publishDate: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  content: JSON
  specialfeatures: SpecialfeatureRelateToManyForUpdateInput
  url: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SpecialfeatureListUpdateArgs {
  where: SpecialfeatureListWhereUniqueInput!
  data: SpecialfeatureListUpdateInput!
}

input SpecialfeatureListCreateInput {
  title: String
  weight: Int
  status: SpecialfeatureListStatusType
  publishDate: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  content: JSON
  specialfeatures: SpecialfeatureRelateToManyForCreateInput
  url: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  specialfeatures: SpecialfeatureManyRelationFilter
  jobs: JobManyRelationFilter
  events: EventManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  specialfeatures: SpecialfeatureRelateToManyForUpdateInput
  jobs: JobRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  specialfeatures: SpecialfeatureRelateToManyForCreateInput
  jobs: JobRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  email: String
  password: PasswordState
  name: String
  role: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  name: StringFilter
  role: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  name: OrderDirection
  role: OrderDirection
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
  name: String
  role: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createBanner(data: BannerCreateInput!): Banner
  createBanners(data: [BannerCreateInput!]!): [Banner]
  updateBanner(where: BannerWhereUniqueInput!, data: BannerUpdateInput!): Banner
  updateBanners(data: [BannerUpdateArgs!]!): [Banner]
  deleteBanner(where: BannerWhereUniqueInput!): Banner
  deleteBanners(where: [BannerWhereUniqueInput!]!): [Banner]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createColumn(data: ColumnCreateInput!): Column
  createColumns(data: [ColumnCreateInput!]!): [Column]
  updateColumn(where: ColumnWhereUniqueInput!, data: ColumnUpdateInput!): Column
  updateColumns(data: [ColumnUpdateArgs!]!): [Column]
  deleteColumn(where: ColumnWhereUniqueInput!): Column
  deleteColumns(where: [ColumnWhereUniqueInput!]!): [Column]
  createEditorChoice(data: EditorChoiceCreateInput!): EditorChoice
  createEditorChoices(data: [EditorChoiceCreateInput!]!): [EditorChoice]
  updateEditorChoice(
    where: EditorChoiceWhereUniqueInput!
    data: EditorChoiceUpdateInput!
  ): EditorChoice
  updateEditorChoices(data: [EditorChoiceUpdateArgs!]!): [EditorChoice]
  deleteEditorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  deleteEditorChoices(where: [EditorChoiceWhereUniqueInput!]!): [EditorChoice]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createJob(data: JobCreateInput!): Job
  createJobs(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updateJobs(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteJobs(where: [JobWhereUniqueInput!]!): [Job]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createResource(data: ResourceCreateInput!): Resource
  createResources(data: [ResourceCreateInput!]!): [Resource]
  updateResource(
    where: ResourceWhereUniqueInput!
    data: ResourceUpdateInput!
  ): Resource
  updateResources(data: [ResourceUpdateArgs!]!): [Resource]
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteResources(where: [ResourceWhereUniqueInput!]!): [Resource]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(
    where: SectionWhereUniqueInput!
    data: SectionUpdateInput!
  ): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createSpecialfeature(data: SpecialfeatureCreateInput!): Specialfeature
  createSpecialfeatures(data: [SpecialfeatureCreateInput!]!): [Specialfeature]
  updateSpecialfeature(
    where: SpecialfeatureWhereUniqueInput!
    data: SpecialfeatureUpdateInput!
  ): Specialfeature
  updateSpecialfeatures(data: [SpecialfeatureUpdateArgs!]!): [Specialfeature]
  deleteSpecialfeature(where: SpecialfeatureWhereUniqueInput!): Specialfeature
  deleteSpecialfeatures(
    where: [SpecialfeatureWhereUniqueInput!]!
  ): [Specialfeature]
  createSpecialfeatureList(
    data: SpecialfeatureListCreateInput!
  ): SpecialfeatureList
  createSpecialfeatureLists(
    data: [SpecialfeatureListCreateInput!]!
  ): [SpecialfeatureList]
  updateSpecialfeatureList(
    where: SpecialfeatureListWhereUniqueInput!
    data: SpecialfeatureListUpdateInput!
  ): SpecialfeatureList
  updateSpecialfeatureLists(
    data: [SpecialfeatureListUpdateArgs!]!
  ): [SpecialfeatureList]
  deleteSpecialfeatureList(
    where: SpecialfeatureListWhereUniqueInput!
  ): SpecialfeatureList
  deleteSpecialfeatureLists(
    where: [SpecialfeatureListWhereUniqueInput!]!
  ): [SpecialfeatureList]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
  name: String
  role: String
}

type Query {
  banners(
    where: BannerWhereInput! = {}
    orderBy: [BannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Banner!]
  banner(where: BannerWhereUniqueInput!): Banner
  bannersCount(where: BannerWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  columns(
    where: ColumnWhereInput! = {}
    orderBy: [ColumnOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Column!]
  column(where: ColumnWhereUniqueInput!): Column
  columnsCount(where: ColumnWhereInput! = {}): Int
  editorChoices(
    where: EditorChoiceWhereInput! = {}
    orderBy: [EditorChoiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EditorChoice!]
  editorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  editorChoicesCount(where: EditorChoiceWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  job(where: JobWhereUniqueInput!): Job
  jobsCount(where: JobWhereInput! = {}): Int
  photos(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  resources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  resource(where: ResourceWhereUniqueInput!): Resource
  resourcesCount(where: ResourceWhereInput! = {}): Int
  sections(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeature(where: SpecialfeatureWhereUniqueInput!): Specialfeature
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  specialfeatureLists(
    where: SpecialfeatureListWhereInput! = {}
    orderBy: [SpecialfeatureListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SpecialfeatureList!]
  specialfeatureList(
    where: SpecialfeatureListWhereUniqueInput!
  ): SpecialfeatureList
  specialfeatureListsCount(where: SpecialfeatureListWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
