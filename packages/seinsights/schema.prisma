// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Banner {
  id             Int       @id @default(autoincrement())
  name           String    @default("")
  order          Int?      @unique
  mobileImage    Photo?    @relation("Banner_mobileImage", fields: [mobileImageId], references: [id])
  mobileImageId  Int?      @map("mobileImage")
  desktopImage   Photo?    @relation("Banner_desktopImage", fields: [desktopImageId], references: [id])
  desktopImageId Int?      @map("desktopImage")
  isActive       Boolean   @default(false)
  publishDate    DateTime?
  url            String    @default("")
  createdAt      DateTime?
  updatedAt      DateTime?
  createdBy      User?     @relation("Banner_createdBy", fields: [createdById], references: [id])
  createdById    Int?      @map("createdBy")
  updatedBy      User?     @relation("Banner_updatedBy", fields: [updatedById], references: [id])
  updatedById    Int?      @map("updatedBy")

  @@index([mobileImageId])
  @@index([desktopImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Category {
  id          Int                @id @default(autoincrement())
  name        String             @default("")
  order       Int?               @unique
  status      CategoryStatusType
  heroImage   Photo?             @relation("Category_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?               @map("heroImage")
  section     Section?           @relation("Category_section", fields: [sectionId], references: [id])
  sectionId   Int?               @map("section")
  posts       Post[]             @relation("Post_category")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?              @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById Int?               @map("createdBy")
  updatedBy   User?              @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?               @map("updatedBy")

  @@index([heroImageId])
  @@index([sectionId])
  @@index([createdById])
  @@index([updatedById])
}

model Column {
  id              Int              @id @default(autoincrement())
  name            String           @default("")
  type            ColumnTypeType
  profile_photo   Photo?           @relation("Column_profile_photo", fields: [profile_photoId], references: [id])
  profile_photoId Int?             @map("profile_photo")
  intro           Json?
  posts           Post[]           @relation("Column_posts")
  specialfeatures Specialfeature[] @relation("Column_specialfeatures")
  apiData         Json?

  @@index([profile_photoId])
}

model EditorChoice {
  id               Int                     @id @default(autoincrement())
  order            Int?                    @unique
  post             Post?                   @relation("EditorChoice_post", fields: [postId], references: [id])
  postId           Int?                    @map("post")
  specialfeature   Specialfeature?         @relation("EditorChoice_specialfeature", fields: [specialfeatureId], references: [id])
  specialfeatureId Int?                    @map("specialfeature")
  status           EditorChoiceStatusType? @default(draft)
  publishDate      DateTime?
  createdAt        DateTime?
  updatedAt        DateTime?
  createdBy        User?                   @relation("EditorChoice_createdBy", fields: [createdById], references: [id])
  createdById      Int?                    @map("createdBy")
  updatedBy        User?                   @relation("EditorChoice_updatedBy", fields: [updatedById], references: [id])
  updatedById      Int?                    @map("updatedBy")

  @@index([postId])
  @@index([specialfeatureId])
  @@index([createdById])
  @@index([updatedById])
}

model Event {
  id                       Int                   @id @default(autoincrement())
  name                     String                @default("")
  eventStatus              EventEventStatusType?
  status                   EventStatusType       @default(draft)
  type                     EventTypeType?
  region                   EventRegionType?
  section                  Section?              @relation("Event_section", fields: [sectionId], references: [id])
  sectionId                Int?                  @map("section")
  heroImage                Photo?                @relation("Event_heroImage", fields: [heroImageId], references: [id])
  heroImageId              Int?                  @map("heroImage")
  content                  Json?
  location                 String                @default("")
  organization             String                @default("")
  event_start              DateTime?
  event_end                DateTime?
  isTop                    Boolean               @default(false)
  bannaerImage             Photo?                @relation("Event_bannaerImage", fields: [bannaerImageId], references: [id])
  bannaerImageId           Int?                  @map("bannaerImage")
  tags                     Tag[]                 @relation("Event_tags")
  relatedEvents            Event[]               @relation("Event_relatedEvents")
  apiData                  Json?
  createdAt                DateTime?
  updatedAt                DateTime?
  createdBy                User?                 @relation("Event_createdBy", fields: [createdById], references: [id])
  createdById              Int?                  @map("createdBy")
  updatedBy                User?                 @relation("Event_updatedBy", fields: [updatedById], references: [id])
  updatedById              Int?                  @map("updatedBy")
  from_Event_relatedEvents Event[]               @relation("Event_relatedEvents")

  @@index([sectionId])
  @@index([heroImageId])
  @@index([bannaerImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Job {
  id                      Int               @id @default(autoincrement())
  name                    String            @default("")
  jobStatus               JobJobStatusType?
  status                  JobStatusType     @default(draft)
  type                    JobTypeType?
  region                  JobRegionType?
  section                 Section?          @relation("Job_section", fields: [sectionId], references: [id])
  sectionId               Int?              @map("section")
  company                 String            @default("")
  loaction                String            @default("")
  official_website        String            @default("")
  official_website_titile String            @default("")
  profile_photo           Photo?            @relation("Job_profile_photo", fields: [profile_photoId], references: [id])
  profile_photoId         Int?              @map("profile_photo")
  content                 Json?
  tags                    Tag[]             @relation("Job_tags")
  relatedJobs             Job[]             @relation("Job_relatedJobs")
  apiData                 Json?
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?             @relation("Job_createdBy", fields: [createdById], references: [id])
  createdById             Int?              @map("createdBy")
  updatedBy               User?             @relation("Job_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?              @map("updatedBy")
  from_Job_relatedJobs    Job[]             @relation("Job_relatedJobs")

  @@index([sectionId])
  @@index([profile_photoId])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                                Int                  @id @default(autoincrement())
  name                              String               @default("")
  copyright                         String?
  imageFile_filesize                Int?
  imageFile_extension               String?
  imageFile_width                   Int?
  imageFile_height                  Int?
  imageFile_mode                    String?
  imageFile_id                      String?
  file_filesize                     Int?
  file_mode                         String?
  file_filename                     String?
  urlOriginal                       String               @default("")
  createdAt                         DateTime?
  updatedAt                         DateTime?
  createdBy                         User?                @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById                       Int?                 @map("createdBy")
  updatedBy                         User?                @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById                       Int?                 @map("updatedBy")
  from_Banner_mobileImage           Banner[]             @relation("Banner_mobileImage")
  from_Banner_desktopImage          Banner[]             @relation("Banner_desktopImage")
  from_Category_heroImage           Category[]           @relation("Category_heroImage")
  from_Column_profile_photo         Column[]             @relation("Column_profile_photo")
  from_Event_heroImage              Event[]              @relation("Event_heroImage")
  from_Event_bannaerImage           Event[]              @relation("Event_bannaerImage")
  from_Job_profile_photo            Job[]                @relation("Job_profile_photo")
  from_Post_heroImage               Post[]               @relation("Post_heroImage")
  from_Resource_profile_photo       Resource[]           @relation("Resource_profile_photo")
  from_Section_heroImage            Section[]            @relation("Section_heroImage")
  from_Specialfeature_heroImage     Specialfeature[]     @relation("Specialfeature_heroImage")
  from_SpecialfeatureList_heroImage SpecialfeatureList[] @relation("SpecialfeatureList_heroImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Post {
  id                               Int              @id @default(autoincrement())
  title                            String           @default("")
  subtitle                         String           @default("")
  weight                           Int?             @default(85)
  status                           PostStatusType?  @default(draft)
  publishDate                      DateTime?
  section                          Section?         @relation("Post_section", fields: [sectionId], references: [id])
  sectionId                        Int?             @map("section")
  category                         Category?        @relation("Post_category", fields: [categoryId], references: [id])
  categoryId                       Int?             @map("category")
  columns                          Column[]         @relation("Column_posts")
  region                           String?
  heroImage                        Photo?           @relation("Post_heroImage", fields: [heroImageId], references: [id])
  heroImageId                      Int?             @map("heroImage")
  heroCaption                      String           @default("")
  heroCreditUrl                    String           @default("")
  brief                            Json?
  content                          Json?
  relatedPosts                     Post[]           @relation("Post_relatedPosts")
  tags                             Tag[]            @relation("Post_tags")
  oldCategory                      String?
  apiDataBrief                     Json?
  apiData                          Json?
  createdAt                        DateTime?
  updatedAt                        DateTime?
  createdBy                        User?            @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById                      Int?             @map("createdBy")
  updatedBy                        User?            @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById                      Int?             @map("updatedBy")
  from_EditorChoice_post           EditorChoice[]   @relation("EditorChoice_post")
  from_Post_relatedPosts           Post[]           @relation("Post_relatedPosts")
  from_Specialfeature_relatedPosts Specialfeature[] @relation("Specialfeature_relatedPosts")

  @@index([sectionId])
  @@index([categoryId])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Resource {
  id                             Int                @id @default(autoincrement())
  name                           String             @default("")
  status                         ResourceStatusType @default(draft)
  region                         ResourceRegionType
  section                        Section?           @relation("Resource_section", fields: [sectionId], references: [id])
  sectionId                      Int?               @map("section")
  profile_photo                  Photo?             @relation("Resource_profile_photo", fields: [profile_photoId], references: [id])
  profile_photoId                Int?               @map("profile_photo")
  content                        Json?
  relatedResources               Resource[]         @relation("Resource_relatedResources")
  apiData                        Json?
  createdAt                      DateTime?
  updatedAt                      DateTime?
  createdBy                      User?              @relation("Resource_createdBy", fields: [createdById], references: [id])
  createdById                    Int?               @map("createdBy")
  updatedBy                      User?              @relation("Resource_updatedBy", fields: [updatedById], references: [id])
  updatedById                    Int?               @map("updatedBy")
  from_Resource_relatedResources Resource[]         @relation("Resource_relatedResources")

  @@index([sectionId])
  @@index([profile_photoId])
  @@index([createdById])
  @@index([updatedById])
}

model Section {
  id          Int               @id @default(autoincrement())
  name        String            @default("")
  order       Int?              @unique
  status      SectionStatusType
  isPresent   Boolean           @default(true)
  heroImage   Photo?            @relation("Section_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?              @map("heroImage")
  category    Category[]        @relation("Category_section")
  posts       Post[]            @relation("Post_section")
  jobs        Job[]             @relation("Job_section")
  events      Event[]           @relation("Event_section")
  resources   Resource[]        @relation("Resource_section")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?             @relation("Section_createdBy", fields: [createdById], references: [id])
  createdById Int?              @map("createdBy")
  updatedBy   User?             @relation("Section_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?              @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Specialfeature {
  id                               Int                       @id @default(autoincrement())
  title                            String                    @default("")
  subtitle                         String                    @default("")
  weight                           Int?                      @default(85)
  status                           SpecialfeatureStatusType? @default(draft)
  publishDate                      DateTime?
  content                          Json?
  columns                          Column[]                  @relation("Column_specialfeatures")
  heroImage                        Photo?                    @relation("Specialfeature_heroImage", fields: [heroImageId], references: [id])
  heroImageId                      Int?                      @map("heroImage")
  heroCaption                      String                    @default("")
  relatedPosts                     Post[]                    @relation("Specialfeature_relatedPosts")
  specialfeatureLists              SpecialfeatureList[]      @relation("Specialfeature_specialfeatureLists")
  tags                             Tag[]                     @relation("Specialfeature_tags")
  apiData                          Json?
  createdAt                        DateTime?
  updatedAt                        DateTime?
  createdBy                        User?                     @relation("Specialfeature_createdBy", fields: [createdById], references: [id])
  createdById                      Int?                      @map("createdBy")
  updatedBy                        User?                     @relation("Specialfeature_updatedBy", fields: [updatedById], references: [id])
  updatedById                      Int?                      @map("updatedBy")
  from_EditorChoice_specialfeature EditorChoice[]            @relation("EditorChoice_specialfeature")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model SpecialfeatureList {
  id              Int                           @id @default(autoincrement())
  title           String                        @default("")
  weight          Int?                          @default(85)
  status          SpecialfeatureListStatusType? @default(draft)
  publishDate     DateTime?
  heroImage       Photo?                        @relation("SpecialfeatureList_heroImage", fields: [heroImageId], references: [id])
  heroImageId     Int?                          @map("heroImage")
  content         Json?
  specialfeatures Specialfeature[]              @relation("Specialfeature_specialfeatureLists")
  url             String                        @default("")
  apiData         Json?
  createdAt       DateTime?
  updatedAt       DateTime?
  createdBy       User?                         @relation("SpecialfeatureList_createdBy", fields: [createdById], references: [id])
  createdById     Int?                          @map("createdBy")
  updatedBy       User?                         @relation("SpecialfeatureList_updatedBy", fields: [updatedById], references: [id])
  updatedById     Int?                          @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Tag {
  id              Int              @id @default(autoincrement())
  name            String           @default("")
  posts           Post[]           @relation("Post_tags")
  specialfeatures Specialfeature[] @relation("Specialfeature_tags")
  jobs            Job[]            @relation("Job_tags")
  events          Event[]          @relation("Event_tags")
  createdAt       DateTime?
  updatedAt       DateTime?
  createdBy       User?            @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById     Int?             @map("createdBy")
  updatedBy       User?            @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById     Int?             @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model User {
  id                                Int                  @id @default(autoincrement())
  email                             String               @unique @default("")
  password                          String
  name                              String               @default("")
  role                              String
  from_Banner_createdBy             Banner[]             @relation("Banner_createdBy")
  from_Banner_updatedBy             Banner[]             @relation("Banner_updatedBy")
  from_Category_createdBy           Category[]           @relation("Category_createdBy")
  from_Category_updatedBy           Category[]           @relation("Category_updatedBy")
  from_EditorChoice_createdBy       EditorChoice[]       @relation("EditorChoice_createdBy")
  from_EditorChoice_updatedBy       EditorChoice[]       @relation("EditorChoice_updatedBy")
  from_Event_createdBy              Event[]              @relation("Event_createdBy")
  from_Event_updatedBy              Event[]              @relation("Event_updatedBy")
  from_Job_createdBy                Job[]                @relation("Job_createdBy")
  from_Job_updatedBy                Job[]                @relation("Job_updatedBy")
  from_Photo_createdBy              Photo[]              @relation("Photo_createdBy")
  from_Photo_updatedBy              Photo[]              @relation("Photo_updatedBy")
  from_Post_createdBy               Post[]               @relation("Post_createdBy")
  from_Post_updatedBy               Post[]               @relation("Post_updatedBy")
  from_Resource_createdBy           Resource[]           @relation("Resource_createdBy")
  from_Resource_updatedBy           Resource[]           @relation("Resource_updatedBy")
  from_Section_createdBy            Section[]            @relation("Section_createdBy")
  from_Section_updatedBy            Section[]            @relation("Section_updatedBy")
  from_Specialfeature_createdBy     Specialfeature[]     @relation("Specialfeature_createdBy")
  from_Specialfeature_updatedBy     Specialfeature[]     @relation("Specialfeature_updatedBy")
  from_SpecialfeatureList_createdBy SpecialfeatureList[] @relation("SpecialfeatureList_createdBy")
  from_SpecialfeatureList_updatedBy SpecialfeatureList[] @relation("SpecialfeatureList_updatedBy")
  from_Tag_createdBy                Tag[]                @relation("Tag_createdBy")
  from_Tag_updatedBy                Tag[]                @relation("Tag_updatedBy")
}

enum CategoryStatusType {
  active
  inactive
}

enum ColumnTypeType {
  trend
  entrepreneur
  publication
}

enum EditorChoiceStatusType {
  published
  draft
  scheduled
  archived
}

enum EventEventStatusType {
  opening
  closed
}

enum EventStatusType {
  published
  draft
  scheduled
  archived
}

enum EventTypeType {
  seinsight
  external
}

enum EventRegionType {
  global
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
}

enum JobJobStatusType {
  opening
  closed
}

enum JobStatusType {
  published
  draft
  scheduled
  archived
}

enum JobTypeType {
  fulltime
  parttime
  intern
  volunteer
}

enum JobRegionType {
  global
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
}

enum PostStatusType {
  published
  draft
  scheduled
  archived
}

enum ResourceStatusType {
  published
  draft
  scheduled
  archived
}

enum ResourceRegionType {
  global
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
}

enum SectionStatusType {
  active
  inactive
}

enum SpecialfeatureStatusType {
  published
  draft
  scheduled
  archived
}

enum SpecialfeatureListStatusType {
  published
  draft
  scheduled
  archived
}