# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  slug: String
  title: String
  subtitle: String
  state: String
  publishedDate: DateTime
  sections(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionsCount(where: SectionWhereInput! = {}): Int
  categories(
    where: PostCategoryWhereInput! = {}
    orderBy: [PostCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostCategory!]
  categoriesCount(where: PostCategoryWhereInput! = {}): Int
  writers(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  writersCount(where: ContactWhereInput! = {}): Int
  photographers(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  photographersCount(where: ContactWhereInput! = {}): Int
  camera_man(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  camera_manCount(where: ContactWhereInput! = {}): Int
  designers(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  designersCount(where: ContactWhereInput! = {}): Int
  engineers(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  engineersCount(where: ContactWhereInput! = {}): Int
  vocals(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  vocalsCount(where: ContactWhereInput! = {}): Int
  extend_byline: String
  heroVideo: Video
  heroImage: Photo
  heroCaption: String
  heroImageSize: String
  style: String
  brief: String
  content: JSON
  topics: Topic
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  titleColor: String
  relateds(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  relatedsCount(where: PostWhereInput! = {}): Int
  og_title: String
  og_description: String
  og_image: Photo
  isFeatured: Boolean
  isAdvertised: Boolean
  hiddenAdvertised: Boolean
  isCampaign: Boolean
  isAdult: Boolean
  lockJS: Boolean
  isAudioSiteOnly: Boolean
  device: String
  css: String
  adTrace: String
  redirect: String
  createTime: DateTime
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  subtitle: StringFilter
  state: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  sections: SectionManyRelationFilter
  categories: PostCategoryManyRelationFilter
  writers: ContactManyRelationFilter
  photographers: ContactManyRelationFilter
  camera_man: ContactManyRelationFilter
  designers: ContactManyRelationFilter
  engineers: ContactManyRelationFilter
  vocals: ContactManyRelationFilter
  extend_byline: StringFilter
  heroVideo: VideoWhereInput
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  heroImageSize: StringNullableFilter
  style: StringNullableFilter
  brief: StringFilter
  topics: TopicWhereInput
  tags: TagManyRelationFilter
  titleColor: StringNullableFilter
  relateds: PostManyRelationFilter
  og_title: StringFilter
  og_description: StringFilter
  og_image: PhotoWhereInput
  isFeatured: BooleanFilter
  isAdvertised: BooleanFilter
  hiddenAdvertised: BooleanFilter
  isCampaign: BooleanFilter
  isAdult: BooleanFilter
  lockJS: BooleanFilter
  isAudioSiteOnly: BooleanFilter
  device: StringNullableFilter
  css: StringFilter
  adTrace: StringFilter
  redirect: StringFilter
  createTime: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input SectionManyRelationFilter {
  every: SectionWhereInput
  some: SectionWhereInput
  none: SectionWhereInput
}

input PostCategoryManyRelationFilter {
  every: PostCategoryWhereInput
  some: PostCategoryWhereInput
  none: PostCategoryWhereInput
}

input ContactManyRelationFilter {
  every: ContactWhereInput
  some: ContactWhereInput
  none: ContactWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PostOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  extend_byline: OrderDirection
  heroCaption: OrderDirection
  heroImageSize: OrderDirection
  style: OrderDirection
  brief: OrderDirection
  titleColor: OrderDirection
  og_title: OrderDirection
  og_description: OrderDirection
  isFeatured: OrderDirection
  isAdvertised: OrderDirection
  hiddenAdvertised: OrderDirection
  isCampaign: OrderDirection
  isAdult: OrderDirection
  lockJS: OrderDirection
  isAudioSiteOnly: OrderDirection
  device: OrderDirection
  css: OrderDirection
  adTrace: OrderDirection
  redirect: OrderDirection
  createTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  slug: String
  title: String
  subtitle: String
  state: String
  publishedDate: DateTime
  sections: SectionRelateToManyForUpdateInput
  categories: PostCategoryRelateToManyForUpdateInput
  writers: ContactRelateToManyForUpdateInput
  photographers: ContactRelateToManyForUpdateInput
  camera_man: ContactRelateToManyForUpdateInput
  designers: ContactRelateToManyForUpdateInput
  engineers: ContactRelateToManyForUpdateInput
  vocals: ContactRelateToManyForUpdateInput
  extend_byline: String
  heroVideo: VideoRelateToOneForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  heroImageSize: String
  style: String
  brief: String
  content: JSON
  topics: TopicRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  titleColor: String
  relateds: PostRelateToManyForUpdateInput
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  isAdvertised: Boolean
  hiddenAdvertised: Boolean
  isCampaign: Boolean
  isAdult: Boolean
  lockJS: Boolean
  isAudioSiteOnly: Boolean
  device: String
  css: String
  adTrace: String
  redirect: String
  createTime: DateTime
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SectionRelateToManyForUpdateInput {
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input PostCategoryRelateToManyForUpdateInput {
  disconnect: [PostCategoryWhereUniqueInput!]
  set: [PostCategoryWhereUniqueInput!]
  create: [PostCategoryCreateInput!]
  connect: [PostCategoryWhereUniqueInput!]
}

input ContactRelateToManyForUpdateInput {
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input VideoRelateToOneForUpdateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
  disconnect: Boolean
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input TopicRelateToOneForUpdateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  slug: String
  title: String
  subtitle: String
  state: String
  publishedDate: DateTime
  sections: SectionRelateToManyForCreateInput
  categories: PostCategoryRelateToManyForCreateInput
  writers: ContactRelateToManyForCreateInput
  photographers: ContactRelateToManyForCreateInput
  camera_man: ContactRelateToManyForCreateInput
  designers: ContactRelateToManyForCreateInput
  engineers: ContactRelateToManyForCreateInput
  vocals: ContactRelateToManyForCreateInput
  extend_byline: String
  heroVideo: VideoRelateToOneForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  heroImageSize: String
  style: String
  brief: String
  content: JSON
  topics: TopicRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  titleColor: String
  relateds: PostRelateToManyForCreateInput
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  isAdvertised: Boolean
  hiddenAdvertised: Boolean
  isCampaign: Boolean
  isAdult: Boolean
  lockJS: Boolean
  isAudioSiteOnly: Boolean
  device: String
  css: String
  adTrace: String
  redirect: String
  createTime: DateTime
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SectionRelateToManyForCreateInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input PostCategoryRelateToManyForCreateInput {
  create: [PostCategoryCreateInput!]
  connect: [PostCategoryWhereUniqueInput!]
}

input ContactRelateToManyForCreateInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input VideoRelateToOneForCreateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input TopicRelateToOneForCreateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type EditorChoice {
  id: ID!
  choices(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  choicesCount(where: PostWhereInput! = {}): Int
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EditorChoiceWhereUniqueInput {
  id: ID
}

input EditorChoiceWhereInput {
  AND: [EditorChoiceWhereInput!]
  OR: [EditorChoiceWhereInput!]
  NOT: [EditorChoiceWhereInput!]
  id: IDFilter
  choices: PostManyRelationFilter
  state: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EditorChoiceOrderByInput {
  id: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EditorChoiceUpdateInput {
  choices: PostRelateToManyForUpdateInput
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EditorChoiceUpdateArgs {
  where: EditorChoiceWhereUniqueInput!
  data: EditorChoiceUpdateInput!
}

input EditorChoiceCreateInput {
  choices: PostRelateToManyForCreateInput
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Topic {
  id: ID!
  name: String
  subtitle: String
  state: String
  brief: String
  leading: String
  heroVideo: Video
  heroImage: Photo
  heroImageSize: String
  og_title: String
  og_description: String
  og_image: Photo
  isFeatured: Boolean
  title_style: String
  type: String
  source: String
  sort: String
  style: String
  uuid: String
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  javascript: String
  dfp: String
  mobile_dfp: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TopicWhereUniqueInput {
  id: ID
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  name: StringFilter
  subtitle: StringFilter
  state: StringNullableFilter
  brief: StringFilter
  leading: StringNullableFilter
  heroVideo: VideoWhereInput
  heroImage: PhotoWhereInput
  heroImageSize: StringNullableFilter
  og_title: StringFilter
  og_description: StringFilter
  og_image: PhotoWhereInput
  isFeatured: BooleanFilter
  title_style: StringNullableFilter
  type: StringNullableFilter
  source: StringNullableFilter
  sort: StringNullableFilter
  style: StringFilter
  uuid: StringFilter
  tags: TagManyRelationFilter
  posts: PostManyRelationFilter
  javascript: StringFilter
  dfp: StringFilter
  mobile_dfp: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  name: OrderDirection
  subtitle: OrderDirection
  state: OrderDirection
  brief: OrderDirection
  leading: OrderDirection
  heroImageSize: OrderDirection
  og_title: OrderDirection
  og_description: OrderDirection
  isFeatured: OrderDirection
  title_style: OrderDirection
  type: OrderDirection
  source: OrderDirection
  sort: OrderDirection
  style: OrderDirection
  uuid: OrderDirection
  javascript: OrderDirection
  dfp: OrderDirection
  mobile_dfp: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TopicUpdateInput {
  name: String
  subtitle: String
  state: String
  brief: String
  leading: String
  heroVideo: VideoRelateToOneForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  heroImageSize: String
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  title_style: String
  type: String
  source: String
  sort: String
  style: String
  uuid: String
  tags: TagRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  javascript: String
  dfp: String
  mobile_dfp: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  name: String
  subtitle: String
  state: String
  brief: String
  leading: String
  heroVideo: VideoRelateToOneForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  heroImageSize: String
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  title_style: String
  type: String
  source: String
  sort: String
  style: String
  uuid: String
  tags: TagRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  javascript: String
  dfp: String
  mobile_dfp: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Magazine {
  id: ID!
  title: String
  issue: String
  description: String
  coverPhoto: Photo
  type: String
  publishedDate: DateTime
  state: String
  createTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MagazineWhereUniqueInput {
  id: ID
}

input MagazineWhereInput {
  AND: [MagazineWhereInput!]
  OR: [MagazineWhereInput!]
  NOT: [MagazineWhereInput!]
  id: IDFilter
  title: StringFilter
  issue: StringFilter
  description: StringFilter
  coverPhoto: PhotoWhereInput
  type: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  state: StringNullableFilter
  createTime: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input MagazineOrderByInput {
  id: OrderDirection
  title: OrderDirection
  issue: OrderDirection
  description: OrderDirection
  type: OrderDirection
  publishedDate: OrderDirection
  state: OrderDirection
  createTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MagazineUpdateInput {
  title: String
  issue: String
  description: String
  coverPhoto: PhotoRelateToOneForUpdateInput
  type: String
  publishedDate: DateTime
  state: String
  createTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MagazineUpdateArgs {
  where: MagazineWhereUniqueInput!
  data: MagazineUpdateInput!
}

input MagazineCreateInput {
  title: String
  issue: String
  description: String
  coverPhoto: PhotoRelateToOneForCreateInput
  type: String
  publishedDate: DateTime
  state: String
  createTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  file: CustomFileFieldOutput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

interface CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input PhotoWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CustomFileFieldInput {
  upload: Upload
  ref: String
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Contact {
  id: ID!
  name: String
  email: String
  image: Photo
  homepage: String
  facebook: String
  twitter: String
  instantgram: String
  address: String
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ContactWhereUniqueInput {
  id: ID
  email: String
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  image: PhotoWhereInput
  homepage: StringFilter
  facebook: StringFilter
  twitter: StringFilter
  instantgram: StringFilter
  address: StringFilter
  bio: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  homepage: OrderDirection
  facebook: OrderDirection
  twitter: OrderDirection
  instantgram: OrderDirection
  address: OrderDirection
  bio: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ContactUpdateInput {
  name: String
  email: String
  image: PhotoRelateToOneForUpdateInput
  homepage: String
  facebook: String
  twitter: String
  instantgram: String
  address: String
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  name: String
  email: String
  image: PhotoRelateToOneForCreateInput
  homepage: String
  facebook: String
  twitter: String
  instantgram: String
  address: String
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Video {
  id: ID!
  name: String
  youtubeUrl: String
  file: CustomFileFieldOutput
  coverPhoto: Photo
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  youtubeUrl: StringFilter
  coverPhoto: PhotoWhereInput
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  url: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  youtubeUrl: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  url: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  youtubeUrl: String
  file: CustomFileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  youtubeUrl: String
  file: CustomFileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Section {
  id: ID!
  name: String
  title: String
  description: String
  categories(
    where: PostCategoryWhereInput! = {}
    orderBy: [PostCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostCategory!]
  categoriesCount(where: PostCategoryWhereInput! = {}): Int
  extend_cats(
    where: PostCategoryWhereInput! = {}
    orderBy: [PostCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostCategory!]
  extend_catsCount(where: PostCategoryWhereInput! = {}): Int
  heroImage: Photo
  isFeatured: Boolean
  style: String
  og_title: String
  og_description: String
  og_image: Photo
  isMemberOnly: Boolean
  timeline: String
  topics(
    where: TopicWhereInput! = {}
    orderBy: [TopicOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  css: String
  javascript: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input SectionWhereUniqueInput {
  id: ID
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  description: StringFilter
  categories: PostCategoryManyRelationFilter
  extend_cats: PostCategoryManyRelationFilter
  heroImage: PhotoWhereInput
  isFeatured: BooleanFilter
  style: StringNullableFilter
  og_title: StringFilter
  og_description: StringFilter
  og_image: PhotoWhereInput
  isMemberOnly: BooleanFilter
  timeline: StringFilter
  topics: TopicManyRelationFilter
  css: StringFilter
  javascript: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TopicManyRelationFilter {
  every: TopicWhereInput
  some: TopicWhereInput
  none: TopicWhereInput
}

input SectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  description: OrderDirection
  isFeatured: OrderDirection
  style: OrderDirection
  og_title: OrderDirection
  og_description: OrderDirection
  isMemberOnly: OrderDirection
  timeline: OrderDirection
  css: OrderDirection
  javascript: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SectionUpdateInput {
  name: String
  title: String
  description: String
  categories: PostCategoryRelateToManyForUpdateInput
  extend_cats: PostCategoryRelateToManyForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  style: String
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForUpdateInput
  isMemberOnly: Boolean
  timeline: String
  topics: TopicRelateToManyForUpdateInput
  css: String
  javascript: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TopicRelateToManyForUpdateInput {
  disconnect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  name: String
  title: String
  description: String
  categories: PostCategoryRelateToManyForCreateInput
  extend_cats: PostCategoryRelateToManyForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  style: String
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForCreateInput
  isMemberOnly: Boolean
  timeline: String
  topics: TopicRelateToManyForCreateInput
  css: String
  javascript: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input TopicRelateToManyForCreateInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

type AudioFile {
  id: ID!
  name: String
  file: CustomFileFieldOutput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input AudioFileWhereUniqueInput {
  id: ID
}

type LocalCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input AudioFileWhereInput {
  AND: [AudioFileWhereInput!]
  OR: [AudioFileWhereInput!]
  NOT: [AudioFileWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  url: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AudioFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  url: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AudioFileUpdateInput {
  name: String
  file: CustomFileFieldInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input AudioFileUpdateArgs {
  where: AudioFileWhereUniqueInput!
  data: AudioFileUpdateInput!
}

input AudioFileCreateInput {
  name: String
  file: CustomFileFieldInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type External {
  id: ID!
  name: String
  partner: Partner
  title: String
  subtitle: String
  state: String
  publishedDate: DateTime
  extend_byline: String
  thumb: String
  brief: String
  content: String
  source: String
  createTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ExternalWhereUniqueInput {
  id: ID
  name: String
}

input ExternalWhereInput {
  AND: [ExternalWhereInput!]
  OR: [ExternalWhereInput!]
  NOT: [ExternalWhereInput!]
  id: IDFilter
  name: StringFilter
  partner: PartnerWhereInput
  title: StringFilter
  subtitle: StringFilter
  state: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  extend_byline: StringFilter
  thumb: StringFilter
  brief: StringFilter
  content: StringFilter
  source: StringFilter
  createTime: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ExternalOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  extend_byline: OrderDirection
  thumb: OrderDirection
  brief: OrderDirection
  content: OrderDirection
  source: OrderDirection
  createTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExternalUpdateInput {
  name: String
  partner: PartnerRelateToOneForUpdateInput
  title: String
  subtitle: String
  state: String
  publishedDate: DateTime
  extend_byline: String
  thumb: String
  brief: String
  content: String
  source: String
  createTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PartnerRelateToOneForUpdateInput {
  create: PartnerCreateInput
  connect: PartnerWhereUniqueInput
  disconnect: Boolean
}

input ExternalUpdateArgs {
  where: ExternalWhereUniqueInput!
  data: ExternalUpdateInput!
}

input ExternalCreateInput {
  name: String
  partner: PartnerRelateToOneForCreateInput
  title: String
  subtitle: String
  state: String
  publishedDate: DateTime
  extend_byline: String
  thumb: String
  brief: String
  content: String
  source: String
  createTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PartnerRelateToOneForCreateInput {
  create: PartnerCreateInput
  connect: PartnerWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  brief: String
  heroVideo: Video
  heroImage: Photo
  heroImageSize: String
  og_title: String
  og_description: String
  og_image: Photo
  isFeatured: Boolean
  css: String
  uuid: String
  javascript: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  topics(
    where: TopicWhereInput! = {}
    orderBy: [TopicOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  brief: StringFilter
  heroVideo: VideoWhereInput
  heroImage: PhotoWhereInput
  heroImageSize: StringNullableFilter
  og_title: StringFilter
  og_description: StringFilter
  og_image: PhotoWhereInput
  isFeatured: BooleanFilter
  css: StringFilter
  uuid: StringFilter
  javascript: StringFilter
  posts: PostManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  brief: OrderDirection
  heroImageSize: OrderDirection
  og_title: OrderDirection
  og_description: OrderDirection
  isFeatured: OrderDirection
  css: OrderDirection
  uuid: OrderDirection
  javascript: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  brief: String
  heroVideo: VideoRelateToOneForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  heroImageSize: String
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  css: String
  uuid: String
  javascript: String
  posts: PostRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  brief: String
  heroVideo: VideoRelateToOneForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  heroImageSize: String
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  css: String
  uuid: String
  javascript: String
  posts: PostRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PostCategory {
  id: ID!
  name: String
  title: String
  isFeatured: Boolean
  style: String
  heroImage: Photo
  og_title: String
  og_description: String
  og_image: Photo
  css: String
  javascript: String
  isCampaign: Boolean
  isMemberOnly: Boolean
  isAudioSiteOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PostCategoryWhereUniqueInput {
  id: ID
}

input PostCategoryWhereInput {
  AND: [PostCategoryWhereInput!]
  OR: [PostCategoryWhereInput!]
  NOT: [PostCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  isFeatured: BooleanFilter
  style: StringNullableFilter
  heroImage: PhotoWhereInput
  og_title: StringFilter
  og_description: StringFilter
  og_image: PhotoWhereInput
  css: StringFilter
  javascript: StringFilter
  isCampaign: BooleanFilter
  isMemberOnly: BooleanFilter
  isAudioSiteOnly: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PostCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  isFeatured: OrderDirection
  style: OrderDirection
  og_title: OrderDirection
  og_description: OrderDirection
  css: OrderDirection
  javascript: OrderDirection
  isCampaign: OrderDirection
  isMemberOnly: OrderDirection
  isAudioSiteOnly: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostCategoryUpdateInput {
  name: String
  title: String
  isFeatured: Boolean
  style: String
  heroImage: PhotoRelateToOneForUpdateInput
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForUpdateInput
  css: String
  javascript: String
  isCampaign: Boolean
  isMemberOnly: Boolean
  isAudioSiteOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PostCategoryUpdateArgs {
  where: PostCategoryWhereUniqueInput!
  data: PostCategoryUpdateInput!
}

input PostCategoryCreateInput {
  name: String
  title: String
  isFeatured: Boolean
  style: String
  heroImage: PhotoRelateToOneForCreateInput
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForCreateInput
  css: String
  javascript: String
  isCampaign: Boolean
  isMemberOnly: Boolean
  isAudioSiteOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Event {
  id: ID!
  name: String
  state: String
  publishedDate: DateTime
  sections(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionsCount(where: SectionWhereInput! = {}): Int
  eventType: String
  startDate: DateTime
  endDate: DateTime
  video: Video
  embed: String
  image: Photo
  link: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  state: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  sections: SectionManyRelationFilter
  eventType: StringNullableFilter
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  video: VideoWhereInput
  embed: StringFilter
  image: PhotoWhereInput
  link: StringFilter
  isFeatured: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  eventType: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  embed: OrderDirection
  link: OrderDirection
  isFeatured: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  name: String
  state: String
  publishedDate: DateTime
  sections: SectionRelateToManyForUpdateInput
  eventType: String
  startDate: DateTime
  endDate: DateTime
  video: VideoRelateToOneForUpdateInput
  embed: String
  image: PhotoRelateToOneForUpdateInput
  link: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  state: String
  publishedDate: DateTime
  sections: SectionRelateToManyForCreateInput
  eventType: String
  startDate: DateTime
  endDate: DateTime
  video: VideoRelateToOneForCreateInput
  embed: String
  image: PhotoRelateToOneForCreateInput
  link: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Partner {
  id: ID!
  name: String
  display: String
  website: String
  public: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PartnerWhereUniqueInput {
  id: ID
}

input PartnerWhereInput {
  AND: [PartnerWhereInput!]
  OR: [PartnerWhereInput!]
  NOT: [PartnerWhereInput!]
  id: IDFilter
  name: StringFilter
  display: StringFilter
  website: StringFilter
  public: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PartnerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  display: OrderDirection
  website: OrderDirection
  public: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PartnerUpdateInput {
  name: String
  display: String
  website: String
  public: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PartnerUpdateArgs {
  where: PartnerWhereUniqueInput!
  data: PartnerUpdateInput!
}

input PartnerCreateInput {
  name: String
  display: String
  website: String
  public: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createEditorChoice(data: EditorChoiceCreateInput!): EditorChoice
  createEditorChoices(data: [EditorChoiceCreateInput!]!): [EditorChoice]
  updateEditorChoice(
    where: EditorChoiceWhereUniqueInput!
    data: EditorChoiceUpdateInput!
  ): EditorChoice
  updateEditorChoices(data: [EditorChoiceUpdateArgs!]!): [EditorChoice]
  deleteEditorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  deleteEditorChoices(where: [EditorChoiceWhereUniqueInput!]!): [EditorChoice]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  createMagazine(data: MagazineCreateInput!): Magazine
  createMagazines(data: [MagazineCreateInput!]!): [Magazine]
  updateMagazine(
    where: MagazineWhereUniqueInput!
    data: MagazineUpdateInput!
  ): Magazine
  updateMagazines(data: [MagazineUpdateArgs!]!): [Magazine]
  deleteMagazine(where: MagazineWhereUniqueInput!): Magazine
  deleteMagazines(where: [MagazineWhereUniqueInput!]!): [Magazine]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(
    where: ContactWhereUniqueInput!
    data: ContactUpdateInput!
  ): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(
    where: SectionWhereUniqueInput!
    data: SectionUpdateInput!
  ): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createAudioFile(data: AudioFileCreateInput!): AudioFile
  createAudioFiles(data: [AudioFileCreateInput!]!): [AudioFile]
  updateAudioFile(
    where: AudioFileWhereUniqueInput!
    data: AudioFileUpdateInput!
  ): AudioFile
  updateAudioFiles(data: [AudioFileUpdateArgs!]!): [AudioFile]
  deleteAudioFile(where: AudioFileWhereUniqueInput!): AudioFile
  deleteAudioFiles(where: [AudioFileWhereUniqueInput!]!): [AudioFile]
  createExternal(data: ExternalCreateInput!): External
  createExternals(data: [ExternalCreateInput!]!): [External]
  updateExternal(
    where: ExternalWhereUniqueInput!
    data: ExternalUpdateInput!
  ): External
  updateExternals(data: [ExternalUpdateArgs!]!): [External]
  deleteExternal(where: ExternalWhereUniqueInput!): External
  deleteExternals(where: [ExternalWhereUniqueInput!]!): [External]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createPostCategory(data: PostCategoryCreateInput!): PostCategory
  createPostCategories(data: [PostCategoryCreateInput!]!): [PostCategory]
  updatePostCategory(
    where: PostCategoryWhereUniqueInput!
    data: PostCategoryUpdateInput!
  ): PostCategory
  updatePostCategories(data: [PostCategoryUpdateArgs!]!): [PostCategory]
  deletePostCategory(where: PostCategoryWhereUniqueInput!): PostCategory
  deletePostCategories(where: [PostCategoryWhereUniqueInput!]!): [PostCategory]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createPartner(data: PartnerCreateInput!): Partner
  createPartners(data: [PartnerCreateInput!]!): [Partner]
  updatePartner(
    where: PartnerWhereUniqueInput!
    data: PartnerUpdateInput!
  ): Partner
  updatePartners(data: [PartnerUpdateArgs!]!): [Partner]
  deletePartner(where: PartnerWhereUniqueInput!): Partner
  deletePartners(where: [PartnerWhereUniqueInput!]!): [Partner]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  editorChoices(
    where: EditorChoiceWhereInput! = {}
    orderBy: [EditorChoiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EditorChoice!]
  editorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  editorChoicesCount(where: EditorChoiceWhereInput! = {}): Int
  topics(
    where: TopicWhereInput! = {}
    orderBy: [TopicOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Topic!]
  topic(where: TopicWhereUniqueInput!): Topic
  topicsCount(where: TopicWhereInput! = {}): Int
  magazines(
    where: MagazineWhereInput! = {}
    orderBy: [MagazineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Magazine!]
  magazine(where: MagazineWhereUniqueInput!): Magazine
  magazinesCount(where: MagazineWhereInput! = {}): Int
  photos(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  contacts(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  contact(where: ContactWhereUniqueInput!): Contact
  contactsCount(where: ContactWhereInput! = {}): Int
  videos(
    where: VideoWhereInput! = {}
    orderBy: [VideoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  sections(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  audioFiles(
    where: AudioFileWhereInput! = {}
    orderBy: [AudioFileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AudioFile!]
  audioFile(where: AudioFileWhereUniqueInput!): AudioFile
  audioFilesCount(where: AudioFileWhereInput! = {}): Int
  externals(
    where: ExternalWhereInput! = {}
    orderBy: [ExternalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [External!]
  external(where: ExternalWhereUniqueInput!): External
  externalsCount(where: ExternalWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  postCategories(
    where: PostCategoryWhereInput! = {}
    orderBy: [PostCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostCategory!]
  postCategory(where: PostCategoryWhereUniqueInput!): PostCategory
  postCategoriesCount(where: PostCategoryWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  partners(
    where: PartnerWhereInput! = {}
    orderBy: [PartnerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Partner!]
  partner(where: PartnerWhereUniqueInput!): Partner
  partnersCount(where: PartnerWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
